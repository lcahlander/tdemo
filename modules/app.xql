xquery version "3.0";

module namespace app="http://exist-db.org/apps/tdemo/templates";

import module namespace templates="http://exist-db.org/xquery/templates" ;
import module namespace config="http://exist-db.org/apps/tdemo/config" at "config.xqm";

(:~
 : This is a sample templating function. It will be called by the templating module if
 : it encounters an HTML element with an attribute: data-template="app:test" or class="app:test" (deprecated). 
 : The function has to take 2 default parameters. Additional parameters are automatically mapped to
 : any matching request or function parameter.
 : 
 : @param $node the HTML node with the attribute which triggered this call
 : @param $model a map containing arbitrary data - used to pass information between template calls
 :)
declare function app:test($node as node(), $model as map(*)) {
    <p>Dummy template output generated by function app:test at {current-dateTime()}. The templating
        function was triggered by the class attribute <code>class="app:test"</code>.</p>
};

declare %templates:wrap function app:list($node as node(), $model as map(*)) as map(*) {
    map { 'results' :=  ('a', 'b', 'c') }
};

declare %templates:wrap function app:set-model($node as node(), $model as map(*)) as map(*) {
    map { 'foo' :=  'bar' }
};

declare %templates:wrap function app:list-entry($node as node(), $model as map(*)) {
    $model('entry')
};

declare 
function app:each($node as node(), $model as map(*), $from as xs:string, $to as xs:string) {
    for $item in $model($from)
        return element { node-name($node) } {
        $node/@*, 
        templates:process($node/node(), map:new(($model, map:entry($to, $item))))
    }
};

declare %templates:wrap function app:set-form($node as node(), $model as map(*)) as map(*) {
    map { 'form-name' :=  'foo' }
};
